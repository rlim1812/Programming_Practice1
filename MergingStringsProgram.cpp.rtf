{\rtf1\ansi\ansicpg1252\cocoartf1404\cocoasubrtf130
{\fonttbl\f0\fnil\fcharset0 Menlo-Regular;}
{\colortbl;\red255\green255\blue255;\red0\green116\blue0;\red100\green56\blue32;\red196\green26\blue22;
\red170\green13\blue145;\red92\green38\blue153;\red38\green71\blue75;\red28\green0\blue207;\red46\green13\blue110;
}
\margl1440\margr1440\vieww10800\viewh8400\viewkind0
\deftab529
\pard\tx529\pardeftab529\pardirnatural\partightenfactor0

\f0\fs22 \cf2 \CocoaLigature0 /*\
Ryan Lim\
Professor Giambattista\
CS 110A Homework 6\
*/\cf0 \
\cf3 #include \cf4 <iostream>\cf3 \
#include \cf4 <string>\cf3 \
\cf5 using\cf0  \cf5 namespace\cf0  \cf6 std\cf0 ;\
\
\cf6 string\cf0  getString();\
\cf6 string\cf0  mergeString(\cf6 string\cf0 , \cf6 string\cf0 );\
\cf5 void\cf0  outputString(\cf6 string\cf0 );\
                  \
\cf5 int\cf0  main ()\
\{\
    \cf2 //setting up variables\cf0 \
    \cf6 string\cf0  input1, input2, output;\
    \cf2 //call getString function and ask user for input\cf0 \
    input1 = \cf7 getString\cf0 ();\
    input2 = \cf7 getString\cf0 ();\
    \cf2 //call mergeString function with both user inputs and then return merged string\cf0 \
    output = \cf7 mergeString\cf0 (input1, input2);\
    \cf2 //call outputString function and output merged string\cf0 \
    \cf7 outputString\cf0 (output);\
    \cf5 return\cf0  \cf8 0\cf0 ;\
\}\
\
\cf6 string\cf0  getString()\
\{\
    \cf6 string\cf0  userInput;\
    \cf6 cout\cf0  << \cf4 "Enter a string: "\cf0 ;\
    \cf6 cin\cf0  >> userInput;\
    \cf5 return\cf0  userInput;\
\}\
\
\cf6 string\cf0  mergeString(\cf6 string\cf0  firstString, \cf6 string\cf0  secondString)\
\{\
    \cf2 //setting up variables\cf0 \
    \cf5 double\cf0  string1length = firstString.\cf9 length\cf0 (),\
           string2length = secondString.\cf9 length\cf0 ();\
    \cf6 string\cf0  merger = \cf4 " "\cf0 , concactenation = \cf4 " "\cf0 ;\
    \
    \cf2 //check if firstString is equal length to secondString\cf0 \
    \cf5 if\cf0  (string1length == string2length)\
     \{\
         \cf5 for\cf0  (\cf5 int\cf0  a = \cf8 0\cf0 ; a < string1length; a++)\
           \{\
               concactenation = firstString[a];\
               concactenation += secondString[a];\
               merger += concactenation;\
           \}\
     \}\
    \cf5 else\cf0  \cf5 if\cf0  (string1length > string2length)\
       \{\
           \cf5 for\cf0  (\cf5 int\cf0  b = \cf8 0\cf0 ; b < string2length; b++)\
             \{\
                 concactenation = firstString[b];\
                 concactenation += secondString[b];\
                 merger += concactenation;\
             \}\
           \cf5 for\cf0  (\cf5 int\cf0  c = string2length; c < string1length; c++)\
             \{\
                 merger += firstString[c];\
             \}\
       \}\
    \cf5 else\cf0  \cf5 if\cf0  (string1length < string2length)\
       \{\
           \cf5 for\cf0  (\cf5 int\cf0  d = \cf8 0\cf0 ; d < string1length; d++)\
             \{\
                 concactenation = firstString[d];\
                 concactenation += secondString[d];\
                 merger += concactenation;\
             \}\
           \cf5 for\cf0  (\cf5 int\cf0  e = string1length; e < string2length; e++)\
             \{\
                 merger += secondString[e];\
             \}\
       \}\
    \cf2 //return merged string\cf0 \
    \cf5 return\cf0  merger;\
\}\
\
\cf5 void\cf0  outputString(string Output)\
\{\
    cout << \cf4 "Merged Output:"\cf0 ;\
    \cf5 for\cf0  (\cf5 int\cf0  f = \cf8 0\cf0 ; f < Output.length(); f++)\
      \{\
          cout << Output[f];\
      \}\
    cout << endl;\
\}}